const glfw = require("c/glfw3.jb");
const gl = require("c/gl.jb");

var libm_so = ffi.open("libm.so.6");
const malloc = libm_so.sym("malloc", ffi.pointer, [ffi.int]);
const sin = libm_so.sym("sin", ffi.double, [ffi.double]);
const cos = libm_so.sym("cos", ffi.double, [ffi.double]);
const sqrt = libm_so.sym("sqrt", ffi.double, [ffi.double]);

if (glfw.Init() == 0) return -1;

var width = 640, height = 480;

var window = glfw.CreateWindow(width, height, "Hello World", null, null);
if (window) { } else {
  glfw.Terminate();
  return -1;
}

var view_rotx = 20.0, view_roty = 30.0, view_rotz = 0.0;
var angle = 0.0;

const M_PI = 3.1415926538;

function genTexture() {
  var res = malloc(gl.GLuint.sizeof); res.target_type = gl.GLuint;
  gl.GenTextures(1, res);
  return res[0];
}

function genTextureWithFn(width, height, fn) {
  var tex = genTexture();
  gl.BindTexture(gl.TEXTURE_2D, tex);
  var pixels = malloc(ffi.float.sizeof * width * height * 3); pixels.target_type = ffi.float;
  for (var y = 0; y < height; y++) {
    var ybase = y * width * 3;
    for (var x = 0; x < width; x++) {
      var base = ybase + x*3;
      var color = fn(x, y);
      pixels[base+0] = color.r;
      pixels[base+1] = color.g;
      pixels[base+2] = color.b;
    }
  }
  gl.TexParameterf(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
  gl.TexParameterf(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
  gl.TexImage2D(gl.TEXTURE_2D, 0, gl.RGB, width, height, 0, gl.RGB, gl.FLOAT, pixels);
  gl.TexEnvf(gl.TEXTURE_ENV, gl.TEXTURE_ENV_MODE, gl.MODULATE);
  gl.TexParameterf(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  gl.TexParameterf(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
  return tex;
}

var tex;
function glInit() {
  tex = genTextureWithFn(32, 32, function(x, y) {
    return {r = x/100.; g = y/100.; b = (x+y) / 100; };
  });
}

function vertex(x:float, y:float, z:float) {
  gl.TexCoord2f(x, y+z); gl.Vertex3f(x, y, z);
}

function gear(inner_radius:float, outer_radius:float, width:float, teeth:int, tooth_depth:float) {
  // TODO derive via propagation as an opt pass
  const r0:float = inner_radius;
  const r1:float = outer_radius - tooth_depth / 2.0;
  const r2:float = outer_radius + tooth_depth / 2.0;

  const da:float = 2.0 * M_PI / teeth / 4.0;
  
  gl.ShadeModel(gl.FLAT);

  gl.Normal3f(0.0, 0.0, 1.0);

  /* draw front face */
  gl.Begin(gl.QUAD_STRIP);
  for (var i:int = 0; i <= teeth; i++) {
    const angle:float = i * 2.0 * M_PI / teeth;
    vertex(r0 * cos(angle), r0 * sin(angle), width * 0.5);
    vertex(r1 * cos(angle), r1 * sin(angle), width * 0.5);
    if (i < teeth) {
      vertex(r0 * cos(angle), r0 * sin(angle), width * 0.5);
      vertex(r1 * cos(angle + 3 * da), r1 * sin(angle + 3 * da),
                width * 0.5);
    }
  }
  gl.End();

  /* draw front sides of teeth */
  gl.Begin(gl.QUADS);
  for (var i:int = 0; i < teeth; i++) {
    const angle:float = i * 2.0 * M_PI / teeth;

    vertex(r1 * cos(angle), r1 * sin(angle), width * 0.5);
    vertex(r2 * cos(angle + da), r2 * sin(angle + da), width * 0.5);
    vertex(r2 * cos(angle + 2 * da), r2 * sin(angle + 2 * da),
                width * 0.5);
    vertex(r1 * cos(angle + 3 * da), r1 * sin(angle + 3 * da),
                width * 0.5);
  }
  gl.End();

  gl.Normal3f(0.0, 0.0, -1.0);

  /* draw back face */
  gl.Begin(gl.QUAD_STRIP);
  for (var i:int = 0; i <= teeth; i++) {
    const angle:float = i * 2.0 * M_PI / teeth;
    vertex(r1 * cos(angle), r1 * sin(angle), -width * 0.5);
    vertex(r0 * cos(angle), r0 * sin(angle), -width * 0.5);
    if (i < teeth) {
      vertex(r1 * cos(angle + 3 * da), r1 * sin(angle + 3 * da),
                -width * 0.5);
      vertex(r0 * cos(angle), r0 * sin(angle), -width * 0.5);
    }
  }
  gl.End();

  /* draw back sides of teeth */
  gl.Begin(gl.QUADS);
  for (var i:int = 0; i < teeth; i++) {
    const angle:float = i * 2.0 * M_PI / teeth;

    vertex(r1 * cos(angle + 3 * da), r1 * sin(angle + 3 * da),
                -width * 0.5);
    vertex(r2 * cos(angle + 2 * da), r2 * sin(angle + 2 * da),
                -width * 0.5);
    vertex(r2 * cos(angle + da), r2 * sin(angle + da), -width * 0.5);
    vertex(r1 * cos(angle), r1 * sin(angle), -width * 0.5);
  }
  gl.End();
  
  /* draw outward faces of teeth */
  gl.Begin(gl.QUAD_STRIP);
  for (var i:int = 0; i < teeth; i++) {
    const angle:float = i * 2.0 * M_PI / teeth;
    
    vertex(r1 * cos(angle), r1 * sin(angle), width * 0.5);
    vertex(r1 * cos(angle), r1 * sin(angle), -width * 0.5);
    var u:float = r2 * cos(angle + da) - r1 * cos(angle);
    var v:float = r2 * sin(angle + da) - r1 * sin(angle);
    const len:float = sqrt(u * u + v * v);
    u /= len;
    v /= len;
    gl.Normal3f(v, -u, 0.0);
    vertex(r2 * cos(angle + da), r2 * sin(angle + da), width * 0.5);
    vertex(r2 * cos(angle + da), r2 * sin(angle + da), -width * 0.5);
    gl.Normal3f(cos(angle), sin(angle), 0.0);
    vertex(r2 * cos(angle + 2 * da), r2 * sin(angle + 2 * da),
                width * 0.5);
    vertex(r2 * cos(angle + 2 * da), r2 * sin(angle + 2 * da),
                -width * 0.5);
    u = r1 * cos(angle + 3 * da) - r2 * cos(angle + 2 * da);
    v = r1 * sin(angle + 3 * da) - r2 * sin(angle + 2 * da);
    gl.Normal3f(v, -u, 0.0);
    vertex(r1 * cos(angle + 3 * da), r1 * sin(angle + 3 * da),
                width * 0.5);
    vertex(r1 * cos(angle + 3 * da), r1 * sin(angle + 3 * da),
                -width * 0.5);
    gl.Normal3f(cos(angle), sin(angle), 0.0);
  }

  vertex(r1 * cos(0), r1 * sin(0), width * 0.5);
  vertex(r1 * cos(0), r1 * sin(0), -width * 0.5);

  gl.End();

  gl.ShadeModel(gl.SMOOTH);

  /* draw inside radius cylinder */
  gl.Begin(gl.QUAD_STRIP);
  for (var i:int = 0; i <= teeth; i++) {
    const angle:float = i * 2.0 * M_PI / teeth;
    gl.Normal3f(-cos(angle), -sin(angle), 0.0);
    vertex(r0 * cos(angle), r0 * sin(angle), -width * 0.5);
    vertex(r0 * cos(angle), r0 * sin(angle), width * 0.5);
  }
  gl.End();
}

function drawGL() {
  var h = (height * 1.0) / width;
  gl.MatrixMode(gl.PROJECTION);
  gl.LoadIdentity();
  gl.Frustum(-1.0, 1.0, -h, h, 5.0, 60.0);
  gl.MatrixMode(gl.MODELVIEW);
  gl.LoadIdentity();
  
  gl.Translatef(0.0, 0.0, -40.0);
  
  var pos = malloc(ffi.float.sizeof * 4); pos.target_type = ffi.float;
  pos[0] = 5; pos[1] = 5; pos[2] = 10; pos[3] = 0;
  var red = malloc(ffi.float.sizeof * 4); red.target_type = ffi.float;
  red[0] = 0.8; red[1] = 0.1; red[2] = 0; red[3] = 1;
  var green = malloc(ffi.float.sizeof * 4); green.target_type = ffi.float;
  green[0] = 0; green[1] = 0.8; green[2] = 0.2; green[3] = 1;
  var blue = malloc(ffi.float.sizeof * 4); blue.target_type = ffi.float;
  blue[0] = 0.2; blue[1] = 0.2; blue[2] = 1.0; blue[3] = 1.0;
  
  gl.ShadeModel(gl.SMOOTH);
  gl.ClearDepth(1);
  gl.DepthFunc(gl.LEQUAL);
  gl.Enable(gl.DEPTH_TEST);
  
  gl.Lightfv(gl.LIGHT0, gl.POSITION, pos);
  gl.Enable(gl.CULL_FACE);
  gl.Enable(gl.LIGHTING);
  gl.Enable(gl.LIGHT0);
  gl.ClearColor(0.2, 0.2, 0.2, 0);
  gl.Hint(gl.PERSPECTIVE_CORRECTION_HINT, gl.NICEST);
  
  gl.Clear(gl.COLOR_BUFFER_BIT + gl.DEPTH_BUFFER_BIT);
  gl.Color3f(1, 1, 1);
  
  gl.PushMatrix();
  gl.Rotatef(view_rotx, 1.0, 0.0, 0.0);
  gl.Rotatef(view_roty, 0.0, 1.0, 0.0);
  gl.Rotatef(view_rotz, 0.0, 0.0, 1.0);
  
  gl.Enable(gl.TEXTURE_2D);
  gl.BindTexture(gl.TEXTURE_2D, tex);
  
  gl.PushMatrix();
  gl.Translatef(-3.0, -2.0, 0.0);
  gl.Rotatef(angle, 0.0, 0.0, 1.0);
  gl.Materialfv(gl.FRONT, gl.AMBIENT_AND_DIFFUSE, red);
  gear(1.0, 4.0, 1.0, 20, 0.7);
  gl.PopMatrix();
  
  gl.Disable(gl.TEXTURE_2D);

  gl.PushMatrix();
  gl.Translatef(3.1, -2.0, 0.0);
  gl.Rotatef(-2.0 * angle - 9.0, 0.0, 0.0, 1.0);
  gl.Materialfv(gl.FRONT, gl.AMBIENT_AND_DIFFUSE, green);
  gear(0.5, 2.0, 2.0, 10, 0.7);
  gl.PopMatrix();

  gl.PushMatrix();
  gl.Translatef(-3.1, 4.2, 0.0);
  gl.Rotatef(-2.0 * angle - 25.0, 0.0, 0.0, 1.0);
  gl.Materialfv(gl.FRONT, gl.AMBIENT_AND_DIFFUSE, blue);
  gear(1.3, 2.0, 0.5, 10, 0.7);
  gl.PopMatrix();

  gl.PopMatrix();
}

glfw.MakeContextCurrent(window);
gl.Viewport(0, 0, width, height);
glfw.SwapInterval(1);

glInit();

print("loop start");
for (var frame = 0; frame < 1000; frame++) {
// while (glfw.WindowShouldClose(window) == 0) {
  drawGL();
  angle += 2;
  // glfw.SwapBuffers(window);
  // glfw.PollEvents();
}
print("loop end");

glfw.Terminate();
