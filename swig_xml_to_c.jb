#!build/jerboa

if (arguments.length < 2) {
  print("Expected: swig_xml_to_c.jb [swig xml file] [library file] [prefix]*, not ", arguments);
  assert(false, "bad arguments");
}

var global_typemap = {};
var known_structs = {};

var xmlfile = arguments[0], libfile = arguments[1];
var modifiers = [];

for (var i = 2; i < arguments.length; i++) {
  if (arguments[i] == "-x") {
    i++;
    modifiers.push({ kind = "exclude"; value = arguments[i]; });
  } else if (arguments[i] == "-i") {
    i++;
    modifiers.push({ kind = "include"; value = arguments[i]; });
  } else if (arguments[i] == "-d") {
    print("Define: '", arguments[i+1], "' = '", arguments[i+2], "'");
    global_typemap[arguments[i+1]] = arguments[i+2];
    i += 2;
  } else {
    modifiers.push({ kind = "prefix"; value = arguments[i]; });
  }
}

function getAttr(node, name) {
  // <attributelist><attribute></attribute></attributelist>
  var firstSubNode = null;
  var i = 0;
  var children = node.children;
  while (children[i].nodeType != 1) {
    i++;
    if (i == children.length) { print("fail"); (1/0); }
  }
  var attrs = children[i].children;
  for (var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];
    if (attr.nodeType == 1 && attr.nodeName == "attribute") {
      if (attr.attr["name"] == name) {
        return attr.attr["value"];
      }
    }
  }
  return null;
}

function startswithnum(str) {
  return "0123456789".find(str.slice(0, 1)) != -1;
}

function short_name(str) {
  for (var i = 0; i < modifiers.length; i++) {
    if (modifiers[i].kind == "prefix") {
      var rest = str.startsWith(modifiers[i].value);
      // don't accidentally turn it into a bad identifier
      if (rest && !startswithnum(rest)) { str = rest; }
    }
  }
  return str;
}

function exclude(str) {
  for (var i = 0; i < modifiers.length; i++) {
    if (modifiers[i].kind == "prefix") {
      var rest = str.startsWith(modifiers[i].value);
      // don't accidentally turn it into a bad identifier
      if (rest && !startswithnum(rest)) { str = rest; }
    } else if (modifiers[i].kind == "include") {
      if (str.startsWith(modifiers[i].value)) return false;
    } else {
      assert(modifiers[i].kind == "exclude");
      if (str.startsWith(modifiers[i].value)) return true;
    }
  }
  return false;
}

const xmltools = require("xmltools.jb");

var xmldata = xml.load(xmlfile);

print("select decls");
var decls = xmldata.findByName("cdecl");
print("done. ", decls.length);

print("filter typedefs");
var typedefs = decls.filter(function(node) {
  return getAttr(node, "kind") == "typedef";
});
print("done. ", typedefs.length);
print("process typedefs");
for (var i = 0; i < typedefs.length; i++) {
  var typedef = typedefs[i];
  var name = getAttr(typedef, "name");
  var decl = getAttr(typedef, "decl");
  var type = getAttr(typedef, "type");
  if (!(name in global_typemap)) global_typemap[name] = decl + type;
}
print("done.");

function xml_type_to_ffi_str(type) {
  // print("  debug: ", type);
  if (type in known_structs) return known_structs[type];
  if (type == "p.char") return "ffi.char_pointer";
  if (type == "p.q(const).char") return "ffi.char_pointer";
  if (type.startsWith("a(")) return "null";
  if (type.startsWith("q(const).")) type = type.startsWith("q(const).");
  var p_rest = type.startsWith("p.");
  if (p_rest) {
    var rest_resolve = xml_type_to_ffi_str(p_rest);
    // print("::", rest_resolve, " from ", type, ", ", p_rest);
    if (rest_resolve == "ffi.int8") return "ffi.char_pointer";
    return "ffi.pointer";
  }
  if (type.startsWith("v(")) return "null";
  if (type.startsWith("enum ")) return "ffi.int";
  if (type.startsWith("struct ")) return "null";
  if (type == "void") return "ffi.void";
  if (type == "char") return "ffi.int8";
  if (type == "signed char") return "ffi.int8";
  if (type == "short") return "ffi.short";
  if (type == "int") return "ffi.int";
  if (type == "long") return "ffi.long";
  if (type == "bool") return "ffi.int8";
  // if (type == "size_t") return "ffi.pointer"; // what
  if (type == "unsigned char") return "null";
  if (type == "unsigned short") return "ffi.ushort";
  if (type == "unsigned int") return "ffi.uint";
  if (type == "unsigned long") return "ffi.ulong";
  if (type == "float") return "ffi.float";
  if (type == "double") return "ffi.double";
  if (type == "uint8_t") return "ffi.uint8";
  if (type == "uint16_t") return "ffi.uint16";
  if (type == "uint32_t") return "ffi.uint32";
  if (type == "uint64_t") return "ffi.uint64";
  if (type == "int8_t") return "ffi.int8";
  if (type == "int16_t") return "ffi.int16";
  if (type == "int32_t") return "ffi.int32";
  if (type == "int64_t") return "ffi.int64";
  if (type == "size_t") return "ffi.size_t";
  // print(type, " in ", global_typemap, " -- ", type in global_typemap);
  if (type in global_typemap) {
    return xml_type_to_ffi_str(global_typemap[type]);
  }
  return "null";
}

var top = xmldata.findByName("top")[0];
var inputfile = getAttr(top, "inputfile");

var cfile = file.open("swig_c_gen.c", "w");
cfile.print("#include <stdio.h>");
cfile.print("#include <", inputfile, ">");
cfile.print("int main() {");
cfile.print("  printf(\"var library = ffi.open(\\\"", libfile, "\\\");\\n\");");

print("filter constants");
var constants = xmldata.findByName("constant");
print("done.");
print("parse ", constants.length, " constants");
for (var i = 0; i < constants.length; i++) {
  var constant = constants[i];
  var name = getAttr(constant, "name");
  var value = getAttr(constant, "value");
  value = int.parse(value);
  if (!exclude(name)) {
    cfile.print("  printf(\"const ", short_name(name), " = ", value, ";\\n\");");
  }
}
print("done.");

print("emit constants");
{
  var keys = object.keys(global_typemap);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var type = global_typemap[key];
    var resolved = xml_type_to_ffi_str(type);
    if (resolved != "null" && !exclude(key)) {
      cfile.print("  printf(\"const ", key, " = ", resolved, ";\\n\");");
    }
  }
}
print("done.");

print("filter enum items");
var enumitems = xmldata.findByName("enumitem");
print("done.");
print("parse ", enumitems.length, " flags");
for (var i = 0; i < enumitems.length; i++) {
  var enumitem = enumitems[i];
  var name = getAttr(enumitem, "name");
  var value = getAttr(enumitem, "value");
  value = int.parse(value);
  if (!exclude(name)) {
    cfile.print("  printf(\"const ", short_name(name), " = %i;\\n\", ", name, ");");
  }
}

/*
const SDL_Overlay = {
  pointer: null,
  "[]": function(key) {
    if (key == "w") return this.pointer.dereference(ffi.int, 0);
    if (key == "h") return this.pointer.dereference(ffi.int, 4);
    if (key == "planes") return this.pointer.dereference(ffi.int, 8);
    abort;
  }
};
*/

// TODO typedefs of structs
var structs = xmldata.findByName("class");
print("process structs");
for (var i = 0; i < structs.length; i++) {
  var struct = structs[i];
  var kind = getAttr(struct, "kind");
  if (kind == "struct") {
    var nested = getAttr(struct, "nested");
    var structname = getAttr(struct, "name");
    var skip = false;
    if (nested) if (nested == "1") skip = true;
    // if (getAttr(struct, "code")) skip = true;
    if (exclude(structname)) skip = true;
    if (skip) { print("skip ", structname); }
    else {
      print("process: ", structname);
      var struct_decl = "struct "+structname;
      if (getAttr(struct, "storage") && getAttr(struct, "storage") == "typedef")
        struct_decl = structname;
      known_structs[struct_decl] = short_name(structname);
      var members = struct.findByName("cdecl");
      var complete : bool = true;
      cfile.print("  {");
      cfile.print("    ", struct_decl, " ", "var;");
      cfile.print("    printf(\"const ", short_name(structname), " = new ffi.struct {\\n\");");
      cfile.print("    printf(\"  pointer = null;\\n\");");
      cfile.print("    printf(\"  sizeof = %lu;\\n\", sizeof(var));");
      cfile.print("    printf(\"  \\\"[]\\\" = method(key) {\\n\");");
      var ffi_members = [];
      var assign_fns = {};
      for (var k = 0; k < members.length; k++) {
        var member = members[k];
        var isgood = false;
        if (getAttr(member, "ismember") == "1") isgood = true;
        if (getAttr(member, "bitfield")) isgood = false;
        if (getAttr(member, "kind") != "variable") isgood = false;
        var name = getAttr(member, "name");
        if (isgood) {
          var decl = getAttr(member, "decl");
          var type = getAttr(member, "type");
          var combined_type = decl + type;
          var ffi_type = xml_type_to_ffi_str(combined_type);
          if (ffi_type != "null") {
            ffi_members.push(ffi_type);
            // print(ffi_type, " ", structname, " . ", name, "?");
            cfile.print("    printf(\"    if (key == \\\"", short_name(name), "\\\") return this.pointer.dereference(", ffi_type, ", %li);\\n\",");
            cfile.print("           (char*)&var.", name, " - (char*)&var);");
            assign_fns[name] = function() {
              cfile.print("    printf(\"    if (key == \\\"", short_name(name), "\\\") this.pointer.dereference_assign(", ffi_type, ", %li, value);\\n\",");
              cfile.print("           (char*)&var.", name, " - (char*)&var);");
            };
          } else {
            print("skip ", name, " (unknown type ", combined_type, ")");
            complete = false;
          }
        } else {
          print("skip ", name);
          complete = false;
        }
      }
      cfile.print("    printf(\"  };\\n\");");
      cfile.print("    printf(\"  \\\"[]=\\\" = method(key, value) {\\n\");");
      for (var k = 0; k < members.length; k++) {
        var member = members[k];
        var name = getAttr(member, "name");
        if (name in assign_fns) {
          assign_fns[name]();
        }
      }
      cfile.print("    printf(\"  };\\n\");");
      if (complete) {
        cfile.print("    printf(\"  complete = true;\\n\");");
        cfile.print("    printf(\"  members = ["+ffi_members.join(", ")+"];\\n\");");
      } else {
        cfile.print("    printf(\"  complete = false;\\n\");");
      }
      cfile.print("    printf(\"};\\n\");");
      cfile.print("  };");
    }
  }
}

print("done.");

print("select fn decls");
var fndecls = decls.filter(function(node) {
  return getAttr(node, "kind") == "function";
});
print("done.");

print("parse ", fndecls.length, " fn decls");
for (var i = 0; i < fndecls.length; i++) {
  var decl = fndecls[i];
  // print("? ", getAttr(decl, "name"));
  var ret_type;
  // print(getAttr(decl, "decl"), ", ", getAttr(decl, "type"), " # ", getAttr(decl, "decl").endsWith(".p."));
  if (getAttr(decl, "decl").endsWith(".p.")) ret_type = "ffi.pointer"; // why, ffi
  else ret_type = xml_type_to_ffi_str(getAttr(decl, "type"));
  if (ret_type != "null") {
    var parms = decl.findByName("parm");
    var par_types = [];
    var good = true;
    var name = getAttr(decl, "name");
    if (exclude(name)) good = false;
    for (var k = 0; k < parms.length; k++) {
      var parm = parms[k];
      var typestr = getAttr(parm, "type");
      if (parms.length != 1 || typestr != "void") {
        var type = xml_type_to_ffi_str(typestr);
        if (type == "null") {
          good = false;
          print("arg skip ", getAttr(decl, "name"), " due to ", typestr);
        }
        par_types.push(type);
      }
    }
    if (good) {
      var par_types_str = "[" + par_types.join(", ") + "]";
      var shortn = short_name(name);
      cfile.print("  printf(\"var ", shortn, " = function(...) {\\n\");");
      cfile.print("  printf(\"  var sym = library.sym(\\\"", name, "\\\", ", ret_type, ", ", par_types_str, ");\\n\");");
      cfile.print("  printf(\"  if (sym) {\\n\");");
      cfile.print("  printf(\"    ", shortn, " = sym;\\n\");");
      cfile.print("  printf(\"    _mark_const(\\\"", shortn, "\\\");\\n\");");
      cfile.print("  printf(\"    return ", shortn, ".apply(null, arguments);\\n\");");
      cfile.print("  printf(\"  } else abort();\\n\");");
      cfile.print("  printf(\"};\\n\");");
    } else print("bad skip ", getAttr(decl, "name"));
  } else print("ret skip ", getAttr(decl, "name"));
}
print("done.");

cfile.print("  return 0;");
cfile.print("}");
cfile.close();

print("Now, please do gcc swigify.c -o swigify && ./swigify > [libfile].jb");
