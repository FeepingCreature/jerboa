#ifndef VM_INSTR_H
#define VM_INSTR_H

#include <stdbool.h>

typedef enum {
  INSTR_INVALID = -1,
  INSTR_GET_ROOT = 0,
  INSTR_GET_CONTEXT,
  INSTR_ALLOC_OBJECT,
  INSTR_ALLOC_INT_OBJECT,
  INSTR_ALLOC_FLOAT_OBJECT,
  INSTR_ALLOC_ARRAY_OBJECT,
  INSTR_ALLOC_STRING_OBJECT,
  INSTR_ALLOC_CLOSURE_OBJECT,
  INSTR_CLOSE_OBJECT,
  INSTR_ACCESS,
  INSTR_ASSIGN,
  INSTR_CALL,
  INSTR_RETURN,
  INSTR_SAVE_RESULT, // separate instr to enable interruptions
  INSTR_BR,
  INSTR_TESTBR,
  // everything below this point is only generated by optimizer passes
  INSTR_ACCESS_STRING_KEY,
  INSTR_ASSIGN_STRING_KEY,
  
  INSTR_LAST
} InstrType;

typedef enum {
  // just write the key to the top object, already-present or not
  // ie. hashtable-type access
  ASSIGN_PLAIN,
  // replace an existing key (somewhere in the chain), error if absent
  // ie. scope-type access
  ASSIGN_EXISTING,
  // shadow an existing key (write to top object), but error if absent anywhere
  // ie. object-type access
  ASSIGN_SHADOWING
} AssignType;

typedef struct {
  char *file;
  char *text_from; int row_from, col_from;
  char *text_to;   int row_to  , col_to  ;
  int last_cycle_seen;
} FileRange;

typedef struct {
  InstrType type;
  FileRange *belongs_to;
} Instr;

int instr_size(Instr*);

typedef struct {
  Instr* instrs_ptr, *instrs_ptr_end;
} InstrBlock;

typedef struct {
  InstrBlock* blocks_ptr; int blocks_len;
} FunctionBody;

typedef struct {
  int arity; // first n slots are reserved for parameters
  int slots;
  char *name;
  bool is_method;
  FunctionBody body;
} UserFunction;


typedef struct {
  Instr base;
  int slot;
} GetRootInstr;

typedef struct {
  Instr base;
  int slot;
} GetContextInstr;

struct _Object;
typedef struct _Object Object;

typedef struct {
  Instr base;
  int target_slot, parent_slot;
} AllocObjectInstr;

typedef struct {
  Instr base;
  int target_slot;
  int value;
  Object *int_obj; // cache
} AllocIntObjectInstr;

typedef struct {
  Instr base;
  int target_slot;
  float value;
  Object *float_obj; // cache
} AllocFloatObjectInstr;

typedef struct {
  Instr base;
  int target_slot;
} AllocArrayObjectInstr;

typedef struct {
  Instr base;
  int target_slot;
  char *value;
  Object *str_obj; // cache
} AllocStringObjectInstr;

typedef struct {
  Instr base;
  int target_slot, context_slot;
  UserFunction *fn;
} AllocClosureObjectInstr;

typedef struct {
  Instr base;
  int slot;
} CloseObjectInstr;

typedef struct {
  Instr base;
  int obj_slot, key_slot;
  int target_slot;
} AccessInstr;

typedef struct {
  Instr base;
  int obj_slot, value_slot, key_slot;
  AssignType type;
} AssignInstr;

typedef struct {
  Instr base;
  int function_slot, this_slot;
  int *args_ptr; int args_length;
} CallInstr;

typedef struct {
  Instr base;
  int ret_slot;
} ReturnInstr;

typedef struct {
  Instr base;
  int target_slot;
} SaveResultInstr;

typedef struct {
  Instr base;
  int blk;
} BranchInstr;

typedef struct {
  Instr base;
  int test_slot;
  int true_blk, false_blk;
} TestBranchInstr;


typedef struct {
  Instr base;
  int obj_slot; char *key;
  int target_slot;
} AccessStringKeyInstr;

typedef struct {
  Instr base;
  int obj_slot, value_slot; char *key;
  AssignType type;
} AssignStringKeyInstr;


#endif
