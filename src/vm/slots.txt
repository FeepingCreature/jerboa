/* first read slots, then write slots */
CASE(INSTR_GET_ROOT, GetRootInstr)
  CHKSLOT(instr->base.context_slot); CHKSLOT(instr->slot);
CASE(INSTR_ALLOC_OBJECT, AllocObjectInstr)
  CHKSLOT(instr->base.context_slot); CHKSLOT(instr->parent_slot); CHKSLOT(instr->target_slot);
CASE(INSTR_ALLOC_INT_OBJECT, AllocIntObjectInstr)
  CHKSLOT(instr->base.context_slot); CHKSLOT(instr->target_slot);
CASE(INSTR_ALLOC_BOOL_OBJECT, AllocBoolObjectInstr)
  CHKSLOT(instr->base.context_slot); CHKSLOT(instr->target_slot);
CASE(INSTR_ALLOC_FLOAT_OBJECT, AllocFloatObjectInstr)
  CHKSLOT(instr->base.context_slot); CHKSLOT(instr->target_slot);
CASE(INSTR_ALLOC_ARRAY_OBJECT, AllocArrayObjectInstr)
  CHKSLOT(instr->base.context_slot); CHKSLOT(instr->target_slot);
CASE(INSTR_ALLOC_STRING_OBJECT, AllocStringObjectInstr)
  CHKSLOT(instr->base.context_slot); CHKSLOT(instr->target_slot);
CASE(INSTR_ALLOC_CLOSURE_OBJECT, AllocClosureObjectInstr)
  CHKSLOT(instr->base.context_slot); CHKSLOT(instr->target_slot);
CASE(INSTR_CLOSE_OBJECT, CloseObjectInstr)
  CHKSLOT(instr->base.context_slot); CHKSLOT(instr->slot);
CASE(INSTR_FREEZE_OBJECT, FreezeObjectInstr)
  CHKSLOT(instr->base.context_slot); CHKSLOT(instr->slot);
CASE(INSTR_ACCESS, AccessInstr)
  CHKSLOT(instr->base.context_slot); CHKSLOT(instr->key_slot); CHKSLOT(instr->obj_slot); CHKSLOT(instr->target_slot);
CASE(INSTR_ASSIGN, AssignInstr)
  CHKSLOT(instr->base.context_slot); CHKSLOT(instr->key_slot); CHKSLOT(instr->obj_slot); CHKSLOT(instr->value_slot);
  CHKSLOT(instr->target_slot);
CASE(INSTR_KEY_IN_OBJ, KeyInObjInstr)
  CHKSLOT(instr->base.context_slot); CHKSLOT(instr->key_slot); CHKSLOT(instr->obj_slot); CHKSLOT(instr->target_slot);
CASE(INSTR_INSTANCEOF, InstanceofInstr)
  CHKSLOT(instr->base.context_slot); CHKSLOT(instr->obj_slot); CHKSLOT(instr->proto_slot); CHKSLOT(instr->target_slot);
CASE(INSTR_SET_CONSTRAINT, SetConstraintInstr)
  CHKSLOT(instr->base.context_slot); CHKSLOT(instr->key_slot); CHKSLOT(instr->obj_slot); CHKSLOT(instr->constraint_slot); 
CASE(INSTR_CALL, CallInstr)
  CHKSLOT(instr->base.context_slot);
  CHKSLOT(instr->this_slot);
  if (instr->function.kind == ARG_SLOT) CHKSLOT(instr->function.slot);
  for (int k = 0; k < instr->args_length; ++k) {
    CHKSLOT(((int*)(instr+1))[k]);
  }
  CHKSLOT(instr->target_slot);
CASE(INSTR_RETURN, ReturnInstr)
  CHKSLOT(instr->base.context_slot); CHKSLOT(instr->ret_slot);
CASE(INSTR_BR, BranchInstr)
  CHKSLOT(instr->base.context_slot);
CASE(INSTR_TESTBR, TestBranchInstr)
  CHKSLOT(instr->base.context_slot);
  CHKSLOT(instr->test_slot);
CASE(INSTR_PHI, PhiInstr)
  CHKSLOT(instr->base.context_slot);
  CHKSLOT(instr->slot1);
  CHKSLOT(instr->slot2);
  CHKSLOT(instr->target_slot);

CASE(INSTR_ACCESS_STRING_KEY, AccessStringKeyInstr)
  CHKSLOT(instr->base.context_slot); CHKSLOT(instr->obj_slot); CHKSLOT(instr->target_slot);
  CHKSLOT(instr->key_slot);
CASE(INSTR_ASSIGN_STRING_KEY, AssignStringKeyInstr)
  CHKSLOT(instr->base.context_slot); CHKSLOT(instr->obj_slot); CHKSLOT(instr->value_slot);
CASE(INSTR_SET_CONSTRAINT_STRING_KEY, SetConstraintStringKeyInstr)
  CHKSLOT(instr->base.context_slot); CHKSLOT(instr->obj_slot); CHKSLOT(instr->constraint_slot);
CASE(INSTR_SET_SLOT, SetSlotInstr)
  CHKSLOT(instr->base.context_slot); CHKSLOT(instr->target_slot);
CASE(INSTR_DEFINE_REFSLOT, DefineRefslotInstr)
  CHKSLOT(instr->base.context_slot); CHKSLOT(instr->obj_slot);
CASE(INSTR_READ_REFSLOT, ReadRefslotInstr)
  CHKSLOT(instr->base.context_slot); CHKSLOT(instr->target_slot);
CASE(INSTR_WRITE_REFSLOT, WriteRefslotInstr)
  CHKSLOT(instr->base.context_slot); CHKSLOT(instr->source_slot);
CASE(INSTR_ALLOC_STATIC_OBJECT, AllocStaticObjectInstr)
  CHKSLOT(instr->base.context_slot);
  for (int k = 0; k < instr->info_len; ++k) {
    CHKSLOT(instr->info_ptr[k].slot);
  }
  CHKSLOT(instr->parent_slot); CHKSLOT(instr->target_slot);
