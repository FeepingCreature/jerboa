var libc_so = ffi.open("libc.so.6");
var puts = libc_so.sym("puts", ffi.sint, [ffi.char_pointer]);
var malloc = libc_so.sym("malloc", ffi.pointer, [ffi.sint]);
puts("Hello World from libffi!");

var swig_tools = require("swig_tools.jb");

var gl = swig_tools.loadLibrary("gl_wrap.xml", "libGL.so");
var sdl = swig_tools.loadLibrary("SDL_wrap.xml", "libSDL.so");

sdl["SDL_QUIT"] = 12;

var glu = swig_tools.loadLibrary("glu_wrap.xml", "libGLU.so");

function drawGL() {
  gl.glViewport(0, 0, 800, 600);
  gl.glMatrixMode(gl.GL_PROJECTION);
  gl.glLoadIdentity();
  glu.gluPerspective(45, 800.0/600, 0.1, 100);
  gl.glMatrixMode(gl.GL_MODELVIEW);
  gl.glLoadIdentity();
  
  gl.glShadeModel(gl.GL_SMOOTH);
  gl.glClearDepth(1);
  gl.glDepthFunc(gl.GL_LEQUAL);
  gl.glEnable(gl.GL_DEPTH_TEST);
  gl.glClearColor(0.2, 0.2, 0.2, 0);
  gl.glHint(gl.GL_PERSPECTIVE_CORRECTION_HINT, gl.GL_NICEST);
  
  // TODO '|'
  gl.glClear(gl.GL_COLOR_BUFFER_BIT + gl.GL_DEPTH_BUFFER_BIT);
  gl.glLoadIdentity();
  gl.glTranslatef(-1.5, 0.0, -6.0);
  gl.glColor3f(1, 1, 1);
  gl.glBegin(gl.GL_TRIANGLES);
  gl.glVertex3f( 0.0,  1.0, 0.0);
  gl.glVertex3f(-1.0, -1.0, 0.0);
  gl.glVertex3f( 1.0, -1.0, 0.0);
  gl.glEnd();
  
  gl.glTranslatef(3.0, 0.0, 0.0);
  
  gl.glBegin(gl.GL_QUADS);
  gl.glVertex3f(-1.0, 1.0, 0.0);
  gl.glVertex3f( 1.0, 1.0, 0.0);
  gl.glVertex3f( 1.0,-1.0, 0.0);
  gl.glVertex3f(-1.0,-1.0, 0.0);
  gl.glEnd();
}

sdl.SDL_Init(sdl.SDL_INIT_EVERYTHING);
// TODO '|'
sdl.SDL_SetVideoMode(800, 600, 32, sdl.SDL_OPENGL + sdl.SDL_RESIZABLE);
var event = malloc(64);
var running = true;
while (running) {
  while (sdl.SDL_PollEvent(event)) {
    if (event.dereference(ffi.uint8) == sdl.SDL_QUIT) running = false;
  }
  drawGL();
  sdl.SDL_GL_SwapBuffers();
}
sdl.SDL_Quit();
return 0;

var obj = {a: 5, b: null, bar: method() { print(this.a - this.b); } };
obj.b = /* test */ 7;
var obj2 = new obj { b: 9 };
var objx = new 5 { bar: 7 }; print("objx = "+(objx + objx.bar));
var arr = [2, 3, 4];
arr[1] = 7;
var vv = arr.push(5).pop(); print("vv = " + vv);
print("" + arr[0] + ", " + arr[1] + ", " + arr[2] + " (" + arr.length + ")");
obj["foo"] = method() { print(this.a + this.b); };
obj.foo();
obj.bar();
obj2.foo();
obj2.bar();
var Class = { a: 0 };
var SubClass = new Class { b: 0, test: method() { print("a + b = " + (this.a + this.b)); } };
var obj = new SubClass;
obj.a = 5;
obj.b = 8;
obj.test();
print("debug: "+obj.a+", "+obj.b);
print("2 != 2 = "+(2 != 2));
print("2 !< 2 = "+(2 !< 2));
print("2 !> 2 = "+(2 !> 2));
print("2 !<= 2 = "+(2 !<= 2));
print("2 !>= 2 = "+(2 !>= 2));
for (var i = 0; i < 10; i++) {
  print("i = "+i);
}
