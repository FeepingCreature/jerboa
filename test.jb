var libc_so = ffi.open("libc.so.6");
const puts = libc_so.sym("puts", ffi.int, [ffi.char_pointer]);
const malloc = libc_so.sym("malloc", ffi.pointer, [ffi.int]);
puts("Hello World from libffi!");

var swig_tools = require("swig_tools.jb");

const gl = require("c/gl.jb");
const sdl = require("c/sdl.jb");

const glu = require("c/glu.jb");

function drawGL() {
  gl.Viewport(0, 0, 800, 600);
  gl.MatrixMode(gl.PROJECTION);
  gl.LoadIdentity();
  glu.Perspective(45, 800.0/600, 0.1, 100);
  gl.MatrixMode(gl.MODELVIEW);
  gl.LoadIdentity();
  
  gl.ShadeModel(gl.SMOOTH);
  gl.ClearDepth(1);
  gl.DepthFunc(gl.LEQUAL);
  gl.Enable(gl.DEPTH_TEST);
  gl.ClearColor(0.2, 0.2, 0.2, 0);
  gl.Hint(gl.PERSPECTIVE_CORRECTION_HINT, gl.NICEST);
  
  gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
  gl.LoadIdentity();
  gl.Translatef(-1.5, 0.0, -6.0);
  gl.Color3f(1, 1, 1);
  gl.Begin(gl.TRIANGLES);
  gl.Vertex3f( 0.0,  1.0, 0.0);
  gl.Vertex3f(-1.0, -1.0, 0.0);
  gl.Vertex3f( 1.0, -1.0, 0.0);
  gl.End();
  
  gl.Translatef(3.0, 0.0, 0.0);
  
  gl.Begin(gl.QUADS);
  gl.Vertex3f(-1.0, 1.0, 0.0);
  gl.Vertex3f( 1.0, 1.0, 0.0);
  gl.Vertex3f( 1.0,-1.0, 0.0);
  gl.Vertex3f(-1.0,-1.0, 0.0);
  gl.End();
}

sdl.Init(sdl.INIT_EVERYTHING);
sdl.SetVideoMode(800, 600, 32, sdl.OPENGL | sdl.RESIZABLE);
var event = malloc(64);
var running = true;
while (running) {
  while (sdl.PollEvent(event)) {
    if (event.dereference(ffi.uint8, 0) == sdl.QUIT) running = false;
  }
  drawGL();
  sdl.GL_SwapBuffers();
}
sdl.Quit();
return 0;

var obj = {a = 5; b = null; bar = method() { print(this.a - this.b); }; };
obj.b = /* test */ 7;
var obj2 = new obj { b = 9; };
var objx = new 5 { bar = 7; }; print("objx = "+(objx + objx.bar));
var arr = [2, 3, 4];
arr[1] = 7;
var vv = arr.push(5).pop(); print("vv = " + vv);
print("" + arr[0] + ", " + arr[1] + ", " + arr[2] + " (" + arr.length + ")");
obj["foo"] = method() { print(this.a + this.b); };
obj.foo();
obj.bar();
obj2.foo();
obj2.bar();
var Class = { a = 0; };
var SubClass = new Class { b = 0; test = method() { print("a + b = " + (this.a + this.b)); }; };
var obj = new SubClass;
obj.a = 5;
obj.b = 8;
obj.test();
print("debug: "+obj.a+", "+obj.b);
print("2 != 2 = "+(2 != 2));
print("2 !< 2 = "+(2 !< 2));
print("2 !> 2 = "+(2 !> 2));
print("2 !<= 2 = "+(2 !<= 2));
print("2 !>= 2 = "+(2 !>= 2));
for (var i = 0; i < 10; i++) {
  print("i = "+i);
}
